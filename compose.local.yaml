services:
  postgres:
    container_name: microservices_db_java
    image: postgres:16.3
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
    networks:
      - java-microservices-network
  keycloak:
    container_name: microservices_keycloak
    image: quay.io/keycloak/keycloak:24.0
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
    command: start-dev --import-realm
    volumes:
      - './config/keycloak/import:/opt/keycloak/data/import'
    ports:
      - ${KC_PORT:-8080}:8080
    networks:
      - java-microservices-network
    user: "${UID}:${GID}"
  victoria-metrics:
    container_name: microservices_victoria_metrics
    image: victoriametrics/victoria-metrics:latest
    ports:
      - ${VM_PORT:-8428}:8428
    volumes:
      - './config/victoria-metrics/promscrape.yaml:/promscrape.yaml'
    command: -promscrape.config=/promscrape.yaml
    networks:
      - java-microservices-network
  grafana:
    container_name: microservices_grafana
    image: grafana/grafana:latest
    ports:
      - ${GF_PORT:-3000}:3000
    volumes:
      - './data/grafana/:/var/lib/grafana'
    networks:
      - java-microservices-network
    user: "${UID}:${GID}"
  loki:
    container_name: microservices_loki
    image: grafana/loki:latest
    ports:
      - ${LOKI_PORT:-3100}:3100
    networks:
      - java-microservices-network
  tracing:
    container_name: microservices_tracing
    image: grafana/tempo:2.3.1
    ports:
      - ${TRACING_TEMPO_PORT:-3200}:3200
      - ${TRACING_GRPC_PORT:-9095}:9095
      - ${TRACING_GRPC_TELEMETRY_PORT:-4317}:4317
      - ${TRACING_GRPC_TELEMETRY_HTTP_PORT:-4318}:4318
      - ${ZIPKIN_PORT:-9411}:9411
      - ${JAGGER_PORT:-14268}:14268
    volumes:
      - './config/tempo/tempo.yaml:/etc/tempo.yaml'
    command: -config.file=/etc/tempo.yaml
    networks:
      - java-microservices-network
  config-server:
    container_name: microservices_config_server
    restart: always
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: config-server/target/config-server-0.0.1-SNAPSHOT-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: file:///config/{application}/{profile}
      LOKI: http://loki:3100
    volumes:
      - './config/cloud:/config'
    ports:
      - ${CONFIG_SERVER_PORT:-8888}:8888
    networks:
      - java-microservices-network
  eureka-server:
    container_name: microservices_eureka_server
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: eureka-server/target/eureka-server-0.0.1-SNAPSHOT-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloudconfig
      LOKI: http://loki:3100
      CONFIG_URL: http://config:config-password@config-server:8888
    ports:
      - ${EUREKA_SERVER_PORT:-8761}:8761
    networks:
      - java-microservices-network
  admin-server:
    container_name: microservices_admin_server
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: admin-server/target/admin-server-0.0.1-SNAPSHOT-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloudconfig
      LOKI: http://loki:3100
      EUREKA_URL: http://eureka-server:8761/eureka/
      APP_NAME: admin
      CONFIG_URL: http://config:config-password@config-server:8888
    ports:
      - ${ADMIN_SERVER_PORT:-8085}:8085
    networks:
      - java-microservices-network
  employee-server:
    container_name: microservices_employee_server
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: employee/target/employee-0.3.0-SNAPSHOT-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloudconfig
      APP_NAME: employee
      LOKI: http://loki:3100
      DATABASE_URL: jdbc:postgresql://postgres:5432/postgres
      ZIPKIN_URL: http://tracing:9411/api/v2/spans
      ADMIN_URL: http://admin-server:8085
      EUREKA_URL: http://eureka-server:8761/eureka/
      CONFIG_URL: http://config:config-password@config-server:8888
    ports:
      - ${EMPLOYEE_SERVER_PORT:-8080}:8080
    networks:
      - java-microservices-network
  api-gateway:
    container_name: microservices_api_gateway
    restart: always
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: api-gateway/target/api-gateway-0.0.1-SNAPSHOT-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: cloudconfig
      LOKI: http://loki:3100
      EUREKA_URL: http://eureka-server:8761/eureka/
      APP_NAME: api-gateway
      CONFIG_URL: http://config:config-password@config-server:8888
      ZIPKIN_URL: http://tracing:9411/api/v2/spans
    ports:
      - ${API_GATEWAY_PORT:-8086}:8086
    networks:
      - java-microservices-network

volumes:
  pgdata:

networks:
  java-microservices-network:
    name: java-microservices-network
    external: true
